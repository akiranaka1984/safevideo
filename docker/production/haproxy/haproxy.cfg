global
    # Global settings
    maxconn 4096
    user haproxy
    group haproxy
    daemon
    
    # Logging
    log stdout local0 info
    
    # SSL/TLS settings
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Stats socket for runtime API
    stats socket /var/run/haproxy.sock mode 600 level admin expose-fd listeners
    stats timeout 30s

defaults
    # Default settings
    mode http
    timeout connect 10s
    timeout client 60s
    timeout server 60s
    
    # Enable connection logs
    option httplog
    option dontlognull
    option log-health-checks
    
    # HTTP optimization
    option httpclose
    option forwardfor
    option redispatch
    
    # Health checks
    default-server inter 3s rise 2 fall 3
    
    # Error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Frontend for HTTP (redirects to HTTPS)
frontend http_frontend
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # Redirect all HTTP to HTTPS
    http-request redirect scheme https code 301

# Frontend for HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/safevideo.pem
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # CSP header for enhanced security
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # API endpoints routing
    acl is_api path_beg /api/
    acl is_health path_beg /health
    acl is_metrics path_beg /metrics
    
    # Static files routing
    acl is_static path_beg /static/
    acl is_uploads path_beg /uploads/
    
    # Monitoring endpoints
    acl is_grafana path_beg /grafana/
    acl is_prometheus path_beg /prometheus/
    
    # Blue-Green deployment routing
    # Use a header or cookie to determine environment
    acl use_green hdr(X-Environment) green
    acl use_green cook(environment) green
    
    # Default to blue environment
    use_backend blue_servers if !use_green is_api
    use_backend green_servers if use_green is_api
    
    # Static content served by both environments
    use_backend client_servers if is_static || is_uploads || !is_api
    
    # Monitoring backends
    use_backend grafana_servers if is_grafana
    use_backend prometheus_servers if is_prometheus
    
    # Health check endpoint
    use_backend health_check if is_health
    
    # Default backend
    default_backend blue_servers

# Blue environment backend (Production)
backend blue_servers
    balance roundrobin
    option httpchk GET /api/health
    
    # Health check settings
    default-server check maxconn 100
    
    # Blue servers
    server blue-1 server-blue:5000 check
    server blue-2 server-blue:5000 check
    server blue-3 server-blue:5000 check
    
    # Circuit breaker
    option redispatch
    retries 3
    
    # Connection pooling
    http-reuse safe

# Green environment backend (Staging/Canary)
backend green_servers
    balance roundrobin
    option httpchk GET /api/health
    
    # Health check settings
    default-server check maxconn 100
    
    # Green servers (initially empty)
    # Servers will be added during deployment
    # server green-1 server-green:5000 check
    # server green-2 server-green:5000 check
    # server green-3 server-green:5000 check
    
    # Circuit breaker
    option redispatch
    retries 3
    
    # Connection pooling
    http-reuse safe

# Client application backend
backend client_servers
    balance roundrobin
    option httpchk GET /health
    
    # Client servers
    server client-1 client:80 check
    server client-2 client:80 check
    
    # Static file caching
    http-response set-header Cache-Control "public, max-age=3600"

# Health check backend
backend health_check
    # Simple health response
    http-request return status 200 content-type text/plain string "OK"

# Grafana monitoring backend
backend grafana_servers
    balance roundrobin
    option httpchk GET /api/health
    
    # Remove /grafana prefix
    http-request replace-path /grafana/(.*) /\1
    
    server grafana grafana:3000 check

# Prometheus monitoring backend
backend prometheus_servers
    balance roundrobin
    option httpchk GET /-/healthy
    
    # Remove /prometheus prefix
    http-request replace-path /prometheus/(.*) /\1
    
    server prometheus prometheus:9090 check

# Statistics page
listen stats
    bind *:8404
    
    # Authentication (change credentials)
    stats auth admin:securepassword123
    
    # Enable statistics
    stats enable
    stats uri /
    stats refresh 30s
    stats show-legends
    stats show-node
    
    # Admin capabilities
    stats admin if TRUE
    
    # Hide version for security
    stats hide-version
    
    # Custom title
    stats realm "SafeVideo HAProxy Statistics"

# Blue-Green deployment helper endpoints
listen deployment_control
    bind 127.0.0.1:8405
    
    # Enable runtime API
    stats enable
    stats uri /stats
    stats admin if TRUE
    
    # Health endpoints for deployment scripts
    http-request return status 200 content-type application/json string "{\"status\":\"ok\",\"environment\":\"blue\"}" if { path /blue/health }
    http-request return status 200 content-type application/json string "{\"status\":\"ok\",\"environment\":\"green\"}" if { path /green/health }