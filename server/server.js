const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const http = require('http');
const WebSocket = require('ws');
require('dotenv').config();

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éü„Éâ„É´„Ç¶„Çß„Ç¢„Çí„Ç§„É≥„Éù„Éº„Éà
const { forceHTTPS, securityHeaders, secureCORS } = require('./middleware/security');
const { csrfResponseInterceptor, csrfConfigProvider } = require('./middleware/csrf-interceptor');

// „Éá„Éº„Çø„Éô„Éº„ÇπË®≠ÂÆö„Çí„Ç§„É≥„Éù„Éº„Éà
const { connectDB } = require('./config/db');

// „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö
connectDB();

const app = express();

// HTTPSÂº∑Âà∂ÔºàÊúÄÂàù„Å´ÈÅ©Áî®Ôºâ
app.use(forceHTTPS);

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº„ÅÆË®≠ÂÆö
app.use(securityHeaders);

// „Çª„Ç≠„É•„Ç¢„Å™CORSË®≠ÂÆö
app.use(secureCORS());

// „Åù„ÅÆ‰ªñ„ÅÆ„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use(express.json({ limit: '20mb' }));
app.use(express.urlencoded({ extended: false, limit: '20mb' }));

// Cookie„Éë„Éº„Çµ„ÉºÔºà„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜÁî®Ôºâ
const cookieParser = require('cookie-parser');
app.use(cookieParser(process.env.SESSION_SECRET || 'dev-secret-key'));

// CSRF coordination middleware
app.use(csrfResponseInterceptor);
app.use(csrfConfigProvider);

// „É™„ÇØ„Ç®„Çπ„Éà„É≠„Ç∞Áî®„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ôºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);
  next();
});

// „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàêÔºàËµ∑ÂãïÊôÇ„Å´1ÂõûÔºâ
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  try {
    fs.mkdirSync(uploadsDir, { recursive: true });
    console.log('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü:', uploadsDir);
  } catch (err) {
    console.error('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', err);
  }
}

// Âá∫ÊºîËÄÖ„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
const performersUploadsDir = path.join(__dirname, 'uploads', 'performers');
if (!fs.existsSync(performersUploadsDir)) {
  try {
    fs.mkdirSync(performersUploadsDir, { recursive: true });
    console.log('Âá∫ÊºîËÄÖ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü:', performersUploadsDir);
  } catch (err) {
    console.error('Âá∫ÊºîËÄÖ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', err);
  }
}

// „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÅÆ‰øùÂ≠ò„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÈùôÁöÑ„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶ÂÖ¨Èñã
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// API„É´„Éº„Éà„ÇíË®≠ÂÆö„Åô„ÇãÂâç„Å´CORS„ÅÆpreflight request„ÇíÂá¶ÁêÜ
app.options('*', cors());

// CSRF token endpoints
app.use('/api', require('./routes/csrf'));

// „É´„Éº„ÉàË®≠ÂÆöÔºàÈáçË§á„ÇíÂâäÈô§Ôºâ
app.use('/api/auth', require('./routes/auth'));
app.use('/api/auth/sso', require('./routes/auth-sso'));

// „ÄêÁ∑äÊÄ•‰øÆÊ≠£„Äë„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ /auth „Éë„Çπ„ÇÇËøΩÂä†
app.use('/auth', require('./routes/auth'));
app.use('/api/auth', require('./routes/auth-firebase'));
// app.use('/api/auth/firebase', require('./routes/auth-firebase-v2')); // Temporarily disabled due to middleware issues
app.use('/api/performers', require('./routes/performers'));
// üîí SECURITY FIX: Áõ£Êüª„É≠„Ç∞API„Å´Ë™çË®º„Å®„É≠„Éº„É´„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËøΩÂä†ÔºàCVSS 8.8ÂØæÂøúÔºâ
const auth = require('./middleware/auth');
const checkRole = require('./middleware/checkRole');
app.use('/api/audit-logs', auth, checkRole(['admin']), require('./routes/auditLogs'));
app.use('/api/dashboard', require('./routes/dashboard'));
app.use('/api/documents', require('./routes/api/documents'));
app.use('/api/sharegram', require('./routes/sharegram'));
// app.use('/api/users', require('./routes/users'));
app.use('/test', require('./routes/test-file'));

// Á∑äÊÄ•‰øÆÊ≠£: Êú™„Éû„Ç¶„É≥„Éà„É´„Éº„Éà„ÅÆËøΩÂä†ÔºàAPI„Ç§„É≥„Éï„É©‰øÆÊ≠£Ôºâ
// app.use('/api/webhooks', require('./routes/webhooks')); // Temporarily disabled - missing controller
// app.use('/api/integration', require('./routes/api/integration')); // Temporarily disabled - middleware issues

// v1 API „É´„Éº„ÉàÔºàÁµ±Âêà„ÉÜ„Çπ„ÉàÂØæÂøúÔºâ
// app.use('/api/v1', require('./routes/api/v1')); // Temporarily disabled - initialization errors

// FirebaseË™çË®º‰ªïÊßòÊ∫ñÊã†„É´„Éº„ÉàÔºàCEO„Éü„ÉÉ„Ç∑„Éß„É≥Á¨¨2ÊÆµÈöéÔºâ
// app.use('/auth', require('./routes/auth-firebase')); // Temporarily disabled - missing Firebase config

// KYCÊâøË™çWebhookÔºàCEO„Éü„ÉÉ„Ç∑„Éß„É≥ÊúÄÁµÇÂÆåÈÅÇÔºâ
// app.use('/api/webhooks', require('./routes/webhooks-kyc-approved')); // Temporarily disabled

// „Éê„ÉÉ„ÉÅ„Éâ„Ç≠„É•„É°„É≥„Éà„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàCEOÂÆåÂÖ®Âà∂Ë¶áÔºâ
// app.use('/api/documents', require('./routes/documents-batch')); // Temporarily disabled

// KYCÁä∂ÊÖãÁÆ°ÁêÜ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºàCEOÂÆåÂÖ®Âà∂Ë¶á„Éü„ÉÉ„Ç∑„Éß„É≥Ôºâ
// app.use('/api/kyc', require('./routes/kyc-status')); // Temporarily disabled

// Ë©≥Á¥∞„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºàCEOÂÆåÂÖ®Âà∂Ë¶á„Éü„ÉÉ„Ç∑„Éß„É≥„Éª88%ÈÅîÊàêÔºâ
// app.use('/api/health', require('./routes/health-detailed')); // Temporarily disabled

// Á∑äÊÄ•APIÂÆüË£ÖÔºàÁµ±Âêà„ÉÜ„Çπ„ÉàÂØæÂøúÔºâ
app.use('/api', require('./routes/emergency-api'));

// ÈùôÁöÑ„Éï„Ç°„Ç§„É´„ÅÆÈÖç‰ø°Ë®≠ÂÆöÔºàReact buildÔºâ
const buildPath = path.join(__dirname, '..', 'build');
if (fs.existsSync(buildPath)) {
  console.log('Serving React build from:', buildPath);
  app.use(express.static(buildPath));
} else {
  console.log('React build directory not found:', buildPath);
}

// Á∞°Âçò„Å™„ÉÜ„Çπ„Éà„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/', (req, res) => {
  // SPA „ÅÆ„É°„Ç§„É≥„Éö„Éº„Ç∏„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const indexPath = path.join(__dirname, '..', 'build', 'index.html');
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.json({ message: 'SafeVideo API is running!' });
  }
});

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºàË™çË®º‰∏çË¶ÅÔºâ
app.get('/api/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString()
  });
});

// SPA „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØË®≠ÂÆöÔºàÂÖ®„Å¶„ÅÆAPI„É´„Éº„Éà‰ª•Â§ñ„Çíindex.html„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
app.get('*', (req, res, next) => {
  // API„É´„Éº„Éà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
  if (req.originalUrl.startsWith('/api/')) {
    return next();
  }
  
  // ÈùôÁöÑ„Éï„Ç°„Ç§„É´„É™„ÇØ„Ç®„Çπ„Éà„ÇÇ„Çπ„Ç≠„ÉÉ„Éó
  const staticExtensions = ['.js', '.css', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.svg', '.woff', '.woff2', '.ttf', '.eot'];
  const hasStaticExtension = staticExtensions.some(ext => req.originalUrl.endsWith(ext));
  if (hasStaticExtension) {
    return next();
  }
  
  // React SPA„ÅÆindex.html„ÇíËøî„Åô
  const indexPath = path.join(__dirname, '..', 'build', 'index.html');
  if (fs.existsSync(indexPath)) {
    console.log(`SPA fallback: ${req.originalUrl} -> index.html`);
    res.sendFile(indexPath);
  } else {
    next();
  }
});

// 404„Ç®„É©„Éº„Éè„É≥„Éâ„É©„ÉºÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÂá¶ÁêÜ„Åï„Çå„Å™„Åã„Å£„ÅüÂ†¥ÂêàÔºâ
app.use((req, res, next) => {
  res.status(404).json({ message: `Not Found: ${req.originalUrl}` });
});

// multer„Å´„Çà„Çã„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº„ÇíÂá¶ÁêÜ
app.use((err, req, res, next) => {
  // multer„ÅÆ„Ç®„É©„Éº„ÇíÁâπÂà•„Å´Âá¶ÁêÜ
  if (err.code === 'LIMIT_FILE_SIZE') {
    return res.status(400).json({ 
      message: '„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô„ÄÇ5MB‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ' 
    });
  }
  
  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({ 
      message: '‰∫àÊúü„Åó„Å™„ÅÑ„Éï„Ç£„Éº„É´„ÉâÂêç„Åß„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü„ÄÇ' 
    });
  }
  
  next(err);
});

// CSRF „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
// app.use(csrfErrorHandler); // Temporarily disabled - not defined

// FirebaseÁµ±Âêà„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
// const { firebaseErrorHandler } = require('./middleware/firebase-error-handler');
// app.use(firebaseErrorHandler);

// ‰∏ÄËà¨ÁöÑ„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use((err, req, res, next) => {
  console.error(`Error: ${err.message}`);
  console.error(err.stack);
  
  if (err.name === 'CorsError') {
    return res.status(403).json({ message: 'CORS error: ' + err.message });
  }
  
  res.status(500).json({ 
    message: '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
    error: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

const PORT = process.env.PORT || 5000;

// HTTP „Çµ„Éº„Éê„Éº„Çí‰ΩúÊàê
const server = http.createServer(app);

// WebSocket „Çµ„Éº„Éê„Éº„Çí‰ΩúÊàê
const wss = new WebSocket.Server({ 
  server, 
  path: process.env.WS_PATH || '/ws' 
});

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºàWebSocketÊÉÖÂ†±„ÇíÂê´„ÇÄÔºâ
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    websocket: {
      enabled: process.env.WS_ENABLED === 'true',
      path: process.env.WS_PATH || '/ws',
      connections: wss ? wss.clients.size : 0
    }
  });
});

// WebSocket Êé•Á∂öÁÆ°ÁêÜ
wss.on('connection', (ws, req) => {
  console.log('WebSocket connection established from:', req.socket.remoteAddress);
  
  // Êé•Á∂öÁ¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏
  ws.send(JSON.stringify({
    type: 'connection',
    message: 'WebSocket connection established',
    timestamp: new Date().toISOString()
  }));
  
  // „É°„ÉÉ„Çª„Éº„Ç∏„Éè„É≥„Éâ„É©„Éº
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      console.log('Received WebSocket message:', data);
      
      // „Ç®„Ç≥„Éº„É¨„Çπ„Éù„É≥„Çπ
      ws.send(JSON.stringify({
        type: 'echo',
        data: data,
        timestamp: new Date().toISOString()
      }));
    } catch (error) {
      console.error('WebSocket message parsing error:', error);
      ws.send(JSON.stringify({
        type: 'error',
        message: 'Invalid message format',
        timestamp: new Date().toISOString()
      }));
    }
  });
  
  // ÂàáÊñ≠„Éè„É≥„Éâ„É©„Éº
  ws.on('close', () => {
    console.log('WebSocket connection closed');
  });
  
  // „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });
});

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®„ÅÆ„Éè„Éº„Éà„Éì„Éº„Éà
if (process.env.WS_HEARTBEAT_INTERVAL) {
  setInterval(() => {
    wss.clients.forEach((ws) => {
      if (ws.isAlive === false) {
        ws.terminate();
        return;
      }
      
      ws.isAlive = false;
      ws.ping();
    });
  }, parseInt(process.env.WS_HEARTBEAT_INTERVAL) || 30000);
  
  wss.on('connection', (ws) => {
    ws.isAlive = true;
    ws.on('pong', () => {
      ws.isAlive = true;
    });
  });
}

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`WebSocket server running on ${process.env.WS_PATH || '/ws'}`);
  console.log(`CORS is enabled for all origins`);
});