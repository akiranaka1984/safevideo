version: '3.8'

services:
  client:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      args:
        - NODE_ENV=${NODE_ENV:-production}
    image: safevideo/client:${VERSION:-latest}
    container_name: safevideo-client
    ports:
      - "${CLIENT_PORT:-80}:80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_NAME=${REACT_APP_NAME:-SafeVideo}
      - REACT_APP_VERSION=${VERSION:-1.0.0}
    volumes:
      - ./uploads:/usr/share/nginx/html/uploads:ro
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy

  server:
    build:
      context: ./server
      dockerfile: Dockerfile.optimized
      args:
        - NODE_ENV=${NODE_ENV:-production}
    image: safevideo/server:${VERSION:-latest}
    container_name: safevideo-server
    ports:
      - "${SERVER_PORT:-5001}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-5000}
      - DB_HOST=mysql
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - SESSION_SECRET_FILE=/run/secrets/session_secret
      - CORS_ORIGIN=${CORS_ORIGIN}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - UPLOAD_MAX_FILE_SIZE=${UPLOAD_MAX_FILE_SIZE:-5242880}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - db_password
      - jwt_secret
      - session_secret
      - redis_password
    volumes:
      - ./uploads:/app/uploads
      - logs:/app/logs
      - ./server:/app:ro
      - /app/node_modules
    networks:
      - frontend
      - backend
      - database
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  mysql:
    image: mysql:8.0
    container_name: safevideo-mysql
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
    secrets:
      - mysql_root_password
      - db_password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/backup:/backup
    networks:
      - database
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: safevideo-redis
    command: 
      - redis-server
      - --appendonly yes
      - --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: safevideo-nginx
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - frontend
    depends_on:
      - client
      - server
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.1.0/24
  database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.2.0/24

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  logs:
    driver: local

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  session_secret:
    file: ./secrets/session_secret.txt
  redis_password:
    file: ./secrets/redis_password.txt