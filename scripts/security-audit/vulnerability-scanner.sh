#!/bin/bash

# ==========================================
# SafeVideo Automated Vulnerability Scanner
# ==========================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
REPORT_DIR="$PROJECT_ROOT/security-reports"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
REPORT_FILE="$REPORT_DIR/vulnerability_scan_$TIMESTAMP.html"

# Ensure report directory exists
mkdir -p "$REPORT_DIR"

echo -e "${BLUE}===========================================${NC}"
echo -e "${BLUE}SafeVideo Security Vulnerability Scanner${NC}"
echo -e "${BLUE}===========================================${NC}"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install missing tools
install_tools() {
    echo -e "${YELLOW}Checking required tools...${NC}"
    
    # Check Docker
    if ! command_exists docker; then
        echo -e "${RED}Docker is required but not installed${NC}"
        exit 1
    fi
    
    # Check npm
    if ! command_exists npm; then
        echo -e "${RED}npm is required but not installed${NC}"
        exit 1
    fi
    
    # Install npm audit tools if needed
    if ! npm list -g npm-audit-html >/dev/null 2>&1; then
        echo -e "${YELLOW}Installing npm-audit-html...${NC}"
        npm install -g npm-audit-html
    fi
    
    echo -e "${GREEN}✓ All required tools are available${NC}"
}

# Function to start HTML report
start_html_report() {
    cat > "$REPORT_FILE" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>SafeVideo Security Vulnerability Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #2c3e50; color: white; padding: 20px; text-align: center; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; }
        .critical { background: #f8d7da; border-color: #f5c6cb; }
        .high { background: #fff3cd; border-color: #ffeaa7; }
        .medium { background: #d1ecf1; border-color: #bee5eb; }
        .low { background: #d4edda; border-color: #c3e6cb; }
        .info { background: #e2e3e5; border-color: #d6d8db; }
        pre { background: #f8f9fa; padding: 10px; overflow-x: auto; }
        .timestamp { color: #6c757d; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="header">
        <h1>SafeVideo Security Vulnerability Report</h1>
        <p class="timestamp">Generated: $(date)</p>
    </div>
EOF
}

# Function to add section to HTML report
add_section() {
    local title="$1"
    local content="$2"
    local severity="${3:-info}"
    
    cat >> "$REPORT_FILE" << EOF
    <div class="section $severity">
        <h2>$title</h2>
        <pre>$content</pre>
    </div>
EOF
}

# Function to close HTML report
close_html_report() {
    cat >> "$REPORT_FILE" << EOF
</body>
</html>
EOF
}

# Function to run npm audit
run_npm_audit() {
    echo -e "${YELLOW}Running npm audit...${NC}"
    
    cd "$PROJECT_ROOT"
    
    # Frontend audit
    if [ -f "package.json" ]; then
        echo -e "${BLUE}Scanning frontend dependencies...${NC}"
        npm audit --json > "$REPORT_DIR/npm_audit_frontend_$TIMESTAMP.json" 2>/dev/null || true
        npm audit > "$REPORT_DIR/npm_audit_frontend_$TIMESTAMP.txt" 2>/dev/null || true
        
        # Check if there are vulnerabilities
        if npm audit --audit-level high >/dev/null 2>&1; then
            echo -e "${GREEN}✓ No high/critical vulnerabilities in frontend${NC}"
            add_section "Frontend Dependencies (npm audit)" "No high or critical vulnerabilities found" "low"
        else
            echo -e "${RED}✗ Vulnerabilities found in frontend dependencies${NC}"
            FRONTEND_AUDIT=$(cat "$REPORT_DIR/npm_audit_frontend_$TIMESTAMP.txt")
            add_section "Frontend Dependencies (npm audit)" "$FRONTEND_AUDIT" "high"
        fi
    fi
    
    # Backend audit
    if [ -f "server/package.json" ]; then
        echo -e "${BLUE}Scanning backend dependencies...${NC}"
        cd "$PROJECT_ROOT/server"
        npm audit --json > "$REPORT_DIR/npm_audit_backend_$TIMESTAMP.json" 2>/dev/null || true
        npm audit > "$REPORT_DIR/npm_audit_backend_$TIMESTAMP.txt" 2>/dev/null || true
        
        if npm audit --audit-level high >/dev/null 2>&1; then
            echo -e "${GREEN}✓ No high/critical vulnerabilities in backend${NC}"
            add_section "Backend Dependencies (npm audit)" "No high or critical vulnerabilities found" "low"
        else
            echo -e "${RED}✗ Vulnerabilities found in backend dependencies${NC}"
            BACKEND_AUDIT=$(cat "$REPORT_DIR/npm_audit_backend_$TIMESTAMP.txt")
            add_section "Backend Dependencies (npm audit)" "$BACKEND_AUDIT" "high"
        fi
        cd "$PROJECT_ROOT"
    fi
}

# Function to run Trivy container scan
run_trivy_scan() {
    echo -e "${YELLOW}Running Trivy container vulnerability scan...${NC}"
    
    # Build images for scanning
    docker build -t safevideo-client-test -f Dockerfile.optimized . >/dev/null 2>&1
    docker build -t safevideo-server-test -f server/Dockerfile.optimized ./server >/dev/null 2>&1
    
    # Scan client image
    echo -e "${BLUE}Scanning client container...${NC}"
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image --format json --output /tmp/trivy_client.json safevideo-client-test >/dev/null 2>&1 || true
    
    if [ -f /tmp/trivy_client.json ]; then
        cp /tmp/trivy_client.json "$REPORT_DIR/trivy_client_$TIMESTAMP.json"
        TRIVY_CLIENT=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image safevideo-client-test 2>/dev/null || echo "Scan failed")
        add_section "Client Container Scan (Trivy)" "$TRIVY_CLIENT" "medium"
    fi
    
    # Scan server image
    echo -e "${BLUE}Scanning server container...${NC}"
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy image --format json --output /tmp/trivy_server.json safevideo-server-test >/dev/null 2>&1 || true
    
    if [ -f /tmp/trivy_server.json ]; then
        cp /tmp/trivy_server.json "$REPORT_DIR/trivy_server_$TIMESTAMP.json"
        TRIVY_SERVER=$(docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image safevideo-server-test 2>/dev/null || echo "Scan failed")
        add_section "Server Container Scan (Trivy)" "$TRIVY_SERVER" "medium"
    fi
    
    # Clean up test images
    docker rmi safevideo-client-test safevideo-server-test >/dev/null 2>&1 || true
}

# Function to run secrets scanning
run_secrets_scan() {
    echo -e "${YELLOW}Scanning for secrets...${NC}"
    
    # Use TruffleHog if available
    if command_exists trufflehog; then
        echo -e "${BLUE}Running TruffleHog secrets scan...${NC}"
        trufflehog filesystem "$PROJECT_ROOT" --json > "$REPORT_DIR/secrets_scan_$TIMESTAMP.json" 2>/dev/null || true
        
        if [ -s "$REPORT_DIR/secrets_scan_$TIMESTAMP.json" ]; then
            SECRETS_FOUND=$(cat "$REPORT_DIR/secrets_scan_$TIMESTAMP.json" | jq -r '.[] | "\(.SourceMetadata.Data.Filesystem.file): \(.Raw)"' 2>/dev/null || cat "$REPORT_DIR/secrets_scan_$TIMESTAMP.json")
            add_section "Secrets Scan (TruffleHog)" "$SECRETS_FOUND" "critical"
        else
            add_section "Secrets Scan (TruffleHog)" "No secrets detected" "low"
        fi
    else
        # Basic manual secrets check
        echo -e "${BLUE}Running basic secrets scan...${NC}"
        SECRETS_SCAN=""
        
        # Check for common secret patterns
        if grep -r "password.*=" "$PROJECT_ROOT" --include="*.js" --include="*.json" --include="*.yml" --include="*.yaml" | grep -v "example" | grep -v "test" | head -10; then
            SECRETS_SCAN+="Potential hardcoded passwords found\n"
        fi
        
        if grep -r "api_key\|apikey\|secret_key" "$PROJECT_ROOT" --include="*.js" --include="*.json" | grep -v "example" | head -10; then
            SECRETS_SCAN+="Potential API keys found\n"
        fi
        
        if [ -n "$SECRETS_SCAN" ]; then
            add_section "Basic Secrets Scan" "$SECRETS_SCAN" "high"
        else
            add_section "Basic Secrets Scan" "No obvious secrets detected" "low"
        fi
    fi
}

# Function to check security headers
check_security_headers() {
    echo -e "${YELLOW}Checking security headers configuration...${NC}"
    
    HEADER_CHECK=""
    
    # Check nginx configuration
    if [ -f "$PROJECT_ROOT/nginx/security-headers.conf" ]; then
        HEADER_CHECK+="✓ Security headers configuration found\n"
        HEADER_CHECK+="$(cat "$PROJECT_ROOT/nginx/security-headers.conf")\n"
    else
        HEADER_CHECK+="✗ Security headers configuration not found\n"
    fi
    
    # Check CSP configuration
    if grep -r "Content-Security-Policy" "$PROJECT_ROOT" >/dev/null 2>&1; then
        HEADER_CHECK+="✓ Content Security Policy found\n"
    else
        HEADER_CHECK+="✗ Content Security Policy not configured\n"
    fi
    
    add_section "Security Headers Check" "$HEADER_CHECK" "medium"
}

# Function to check file permissions
check_file_permissions() {
    echo -e "${YELLOW}Checking file permissions...${NC}"
    
    PERM_CHECK=""
    
    # Check for world-writable files
    WORLD_WRITABLE=$(find "$PROJECT_ROOT" -type f -perm -o+w 2>/dev/null | head -10 || true)
    if [ -n "$WORLD_WRITABLE" ]; then
        PERM_CHECK+="✗ World-writable files found:\n$WORLD_WRITABLE\n"
    else
        PERM_CHECK+="✓ No world-writable files found\n"
    fi
    
    # Check for executable scripts
    EXECUTABLE_SCRIPTS=$(find "$PROJECT_ROOT" -name "*.sh" -o -name "*.js" | head -20)
    if [ -n "$EXECUTABLE_SCRIPTS" ]; then
        PERM_CHECK+="Scripts found:\n$EXECUTABLE_SCRIPTS\n"
    fi
    
    add_section "File Permissions Check" "$PERM_CHECK" "info"
}

# Function to check Docker configuration
check_docker_security() {
    echo -e "${YELLOW}Checking Docker security configuration...${NC}"
    
    DOCKER_CHECK=""
    
    # Check Dockerfile best practices
    if [ -f "$PROJECT_ROOT/Dockerfile.optimized" ]; then
        DOCKER_CHECK+="✓ Optimized Dockerfile found\n"
        
        # Check for USER instruction
        if grep -q "USER" "$PROJECT_ROOT/Dockerfile.optimized"; then
            DOCKER_CHECK+="✓ Non-root user configured\n"
        else
            DOCKER_CHECK+="✗ No USER instruction found (running as root)\n"
        fi
        
        # Check for HEALTHCHECK
        if grep -q "HEALTHCHECK" "$PROJECT_ROOT/Dockerfile.optimized"; then
            DOCKER_CHECK+="✓ Health check configured\n"
        else
            DOCKER_CHECK+="✗ No health check configured\n"
        fi
    fi
    
    # Check docker-compose security
    if [ -f "$PROJECT_ROOT/docker-compose.prod.yml" ]; then
        DOCKER_CHECK+="✓ Production docker-compose found\n"
        
        # Check for secrets
        if grep -q "secrets:" "$PROJECT_ROOT/docker-compose.prod.yml"; then
            DOCKER_CHECK+="✓ Docker secrets configured\n"
        else
            DOCKER_CHECK+="✗ No Docker secrets configured\n"
        fi
        
        # Check for networks
        if grep -q "networks:" "$PROJECT_ROOT/docker-compose.prod.yml"; then
            DOCKER_CHECK+="✓ Network configuration found\n"
        else
            DOCKER_CHECK+="✗ No network configuration\n"
        fi
    fi
    
    add_section "Docker Security Check" "$DOCKER_CHECK" "medium"
}

# Function to check OWASP compliance
check_owasp_compliance() {
    echo -e "${YELLOW}Checking OWASP Top 10 compliance...${NC}"
    
    OWASP_CHECK=""
    
    # A01: Broken Access Control
    if grep -r "auth\|authorization" "$PROJECT_ROOT/server/middleware" >/dev/null 2>&1; then
        OWASP_CHECK+="✓ A01: Authentication middleware found\n"
    else
        OWASP_CHECK+="✗ A01: No authentication middleware detected\n"
    fi
    
    # A02: Cryptographic Failures
    if grep -r "bcrypt\|crypto" "$PROJECT_ROOT/server" >/dev/null 2>&1; then
        OWASP_CHECK+="✓ A02: Cryptographic functions found\n"
    else
        OWASP_CHECK+="✗ A02: No cryptographic functions detected\n"
    fi
    
    # A03: Injection
    if [ -f "$PROJECT_ROOT/server/middleware/security/sqlInjection.js" ]; then
        OWASP_CHECK+="✓ A03: SQL injection protection implemented\n"
    else
        OWASP_CHECK+="✗ A03: No SQL injection protection detected\n"
    fi
    
    # A04: Insecure Design
    if [ -f "$PROJECT_ROOT/docs/security-guidelines.md" ]; then
        OWASP_CHECK+="✓ A04: Security documentation found\n"
    else
        OWASP_CHECK+="✗ A04: No security documentation\n"
    fi
    
    # A05: Security Misconfiguration
    if [ -f "$PROJECT_ROOT/security/waf/modsecurity.conf" ]; then
        OWASP_CHECK+="✓ A05: WAF configuration found\n"
    else
        OWASP_CHECK+="✗ A05: No WAF configuration\n"
    fi
    
    # A06: Vulnerable Components
    OWASP_CHECK+="A06: Check npm audit results above\n"
    
    # A07: Identification and Authentication Failures
    if grep -r "rate.*limit\|rateLimit" "$PROJECT_ROOT/server" >/dev/null 2>&1; then
        OWASP_CHECK+="✓ A07: Rate limiting implemented\n"
    else
        OWASP_CHECK+="✗ A07: No rate limiting detected\n"
    fi
    
    # A08: Software and Data Integrity Failures
    if [ -f "$PROJECT_ROOT/.github/workflows/ci.yml" ]; then
        OWASP_CHECK+="✓ A08: CI/CD pipeline found\n"
    else
        OWASP_CHECK+="✗ A08: No CI/CD pipeline\n"
    fi
    
    # A09: Security Logging and Monitoring
    if [ -d "$PROJECT_ROOT/monitoring" ]; then
        OWASP_CHECK+="✓ A09: Monitoring configuration found\n"
    else
        OWASP_CHECK+="✗ A09: No monitoring configuration\n"
    fi
    
    # A10: Server-Side Request Forgery
    if grep -r "csrf\|CSRF" "$PROJECT_ROOT/server" >/dev/null 2>&1; then
        OWASP_CHECK+="✓ A10: CSRF protection implemented\n"
    else
        OWASP_CHECK+="✗ A10: No CSRF protection detected\n"
    fi
    
    add_section "OWASP Top 10 Compliance Check" "$OWASP_CHECK" "high"
}

# Main execution
main() {
    echo -e "${GREEN}Starting security vulnerability scan...${NC}"
    
    install_tools
    start_html_report
    
    run_npm_audit
    run_trivy_scan
    run_secrets_scan
    check_security_headers
    check_file_permissions
    check_docker_security
    check_owasp_compliance
    
    close_html_report
    
    echo -e "${GREEN}===========================================${NC}"
    echo -e "${GREEN}Security scan completed successfully!${NC}"
    echo -e "${GREEN}===========================================${NC}"
    echo -e "${BLUE}Report saved to: $REPORT_FILE${NC}"
    echo -e "${BLUE}Raw data saved to: $REPORT_DIR/${NC}"
    
    # Open report if running in interactive mode
    if [ -t 1 ] && command_exists open; then
        echo -e "${YELLOW}Opening report...${NC}"
        open "$REPORT_FILE"
    fi
}

# Run main function
main "$@"